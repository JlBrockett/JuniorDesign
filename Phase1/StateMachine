#include <math.h>
void(* resetFunc) (void) = 0;


const int blueLED = 10;
const int greenLED = 9;
const int LED = 9;
const int redLED = 11;
const int switchOne = 2;
const int switchTwo = 3;
const int switchThree = 6; // add switch 3
const int switchFour = 5; // add switch 4
const int buttonOne = 7;
int potOneVal = 0; // added potentiometer 1 value (pin A1)
int potTwoVal = 0; // added potentiometer 2 value (pin A2)


int problemCount = 5; // hardcoded based on the detected problems

volatile int ISR_switch = 4;
volatile bool period = false;
volatile bool isOn = false;


enum class states { // initializing diferent states of the program
  ON,
  OFF,
  RUN,
  SLEEP,
  DIAGNOSTIC
};

volatile states currState = states::OFF; // set the current state of the state machine to be OFF (to handle toggling)


void setup() {
  Serial.begin(9600); // set up communication
  pinMode(switchOne, INPUT_PULLUP);
  pinMode(switchTwo, INPUT_PULLUP);
  pinMode(switchThree, INPUT_PULLUP); // add switch 3
  pinMode(switchFour, INPUT_PULLUP); // add switch 4
  pinMode(buttonOne, INPUT_PULLUP);
  pinMode(greenLED, OUTPUT);
  pinMode(redLED, OUTPUT);
  pinMode(blueLED, OUTPUT);
  attachInterrupt(digitalPinToInterrupt(switchOne), switchOneISR, FALLING); // COULD change mode to LOW (test)
  attachInterrupt(digitalPinToInterrupt(switchTwo), switchTwoISR, RISING);
  attachInterrupt(digitalPinToInterrupt(switchThree), toOff, FALLING);

}


void loop() {
  runStates();
}

void toOff() {
  currState = states::OFF;
  isOn = false;
}



void runStates() {  // initializing values for onMillis, diagnosticMillis, and sleepMillis
  static unsigned long onMillis = millis();
  static unsigned long diagnosticMillis = millis();
  static unsigned long sleepMillis = millis();
  // loop continues based on whether the current state of the switch is on


  switch(currState) {
    // WHEN THE STATE MACHINE IS ON THE OFF STATE
    // turns off the LEDs (using handleOff()), checks if switchOne is activated (HIGH), and if so, records the current time and transitions the state machine to the ON state.
    case states::OFF:
      handleOff(); // turn LEDS off
      if (digitalRead(switchThree) == HIGH and isOn == false) {
        isOn = true;
        Serial.println("Switch 1 pressed, entering ON");
        onMillis = millis();
        currState = states::ON;
      }
      break;
   
    // WHEN THE STATE MACHINE IS ON THE ON STATE
    // Blinks LED @ 10Hz (via handleOn()), checks if 5 seconds have passed since entering this state,
    // and if so, transitions the state machine to the DIAGNOSTIC state, recording the time of this transition. (MAY NEED TO BE CHANGED AS SWITCHING TO DIAG. MODE AFTER 5 SECS WAS AN ASSUMPTION)
      case states::ON:
        Serial.println("In ON State");
        handleOn();
      
        if (digitalRead(buttonOne) == HIGH) {  // Check if button is pressed
          Serial.println("Switch 3 pressed, entering DIAGNOSTIC");
          diagnosticMillis = millis();
          currState = states::DIAGNOSTIC;
        }
        break;


      // WHEN THE STATE MACHINE IS ON THE DIAGNOSTIC STATE
      case states::DIAGNOSTIC:
        Serial.println("In DIAGNOSTIC State");
        handleDiagnostic();
        // if (millis() - diagnosticMillis >= 5000) {
        currState = states::RUN;
      //}
      break;


    // WHEN THE STATE MACHINE IS ON THE RUN STATE
    case states::RUN:
     handleRun();
      if (digitalRead(switchFour) == HIGH) {
        sleepMillis = millis();
        currState = states::SLEEP;
      }
      break;
   
    // WHEN THE STATE MACHINE IS ON THE SLEEP STATE
    // DONE BUT NEEDS TO BE REVIEWED
    case states::SLEEP:
      handleSleep(sleepMillis);
      if (millis() - sleepMillis >= 3000) {
        // resetFunc(); //added reset here; might not be neccesary
        currState = states::OFF;
      }
      break;
  }
}

// turn all of the LEDS off
void handleOff() {
  digitalWrite(redLED, LOW);
  digitalWrite(blueLED, LOW);
  digitalWrite(greenLED, LOW);
}


void handleOn() {
  static unsigned long redMillis = millis();
  if (millis() - redMillis > 50) {
        digitalWrite(redLED, !digitalRead(redLED));
        redMillis = millis();
    }
}

void handleDiagnostic() {
  // static unsigned long lastBlinkTime = 0;
  // static int blinkCount = 0;
  // static bool ledState = LOW;
  // unsigned long currentMillis = millis();


  for (int i = 0; i <= problemCount; i++) {
    digitalWrite(redLED, HIGH);
    delay(100);
    digitalWrite(redLED, LOW);
    delay(100);
  }


}


void handleRun() {
  static unsigned long timeConstant = 6000;
  static unsigned long runMillis = millis();
  static unsigned long blinkMillis = millis();
  static unsigned long diff = millis();
  static unsigned long potblinkMillis = millis();
  static bool inBlink = false;
  static int count = 4;
  potOneVal = analogRead(A1); // read the input on analog pin A1
  potTwoVal = analogRead(A2); // read the input on analog pin A2 for fading Blue LED
  int potBright = int(potTwoVal / 4.02); 

  Serial.println("In RUN State");
  //fade 
  if (!inBlink) {
    Serial.println("Fade side");
    //fade logic
    diff = millis() - runMillis;
    if (diff < timeConstant) {
      Serial.println("Fading");
      int brightness = 255 - (255 * (diff)/timeConstant);
      //int brightness = 255 * exp(-diff/timeConstant);
      Serial.println(brightness);
      analogWrite(greenLED, brightness);
    }
    else {
      Serial.println("Fade ends");
      inBlink = true;
      blinkMillis = millis();
    }
  }

  //blink
  if (inBlink and count > 0) {
    if (millis() - blinkMillis > 500) {
      Serial.println("Blink");
      digitalWrite(greenLED, !digitalRead(greenLED));
      blinkMillis = millis();
      count --;
      if (count == 0) {
        Serial.println("Blink ends");
        inBlink = false;
        runMillis = millis();
        count = 4;
        //digitalWrite(greenLED, !digitalRead(greenLED));
      }
    }
  }

  // for blinking for Red LED w/ poteniameter 1
  if (millis() - potblinkMillis > potOneVal) {
    digitalWrite(redLED, !digitalRead(redLED));
    potblinkMillis = millis();

  }
  
  analogWrite(blueLED, potBright); // for fading Blue LED w/ poteniameter 2

}


// NEED TO BE REVIEWED
// Fading and blinking logic might overlap, causing potentially unintended behavior. Specifically, the Startfade variable is reset every 125 milliseconds
// during the blinking phase, which could interfere with the intended linear fading.
// The fadeAmount variable is not used in the current implementation. If intended for adjusting the fade rate, you might need to integrate it into your fading logic.
// The interaction between blinking and fading needs careful testing to ensure it behaves as expected in the SLEEP state.

void handleSleep(long sleep) {
  //move millis to RUN state to reset on transition.
  static unsigned long blueMillis = millis();
  static unsigned long Startfade = millis();
  static int brightness = 255;
  static int fadeAmount = 5;
  unsigned long speed = period ? 50 : 125;
  // unsigned long speed = 125;

  blueMillis = sleep;
  // Startfade = sleep;
  if ((millis() - blueMillis) > 1000) {
    //fade
    brightness = 255 - (255 * (millis() - Startfade)/1000);
    analogWrite(blueLED, brightness);
  }
  else if ((millis() - blueMillis) % speed == 0) {
    //blink
    digitalWrite(blueLED, !digitalRead(blueLED));
    Startfade = millis();
  }
}

void switchOneISR() {
  if (currState == states::RUN) {
    period = true;
  }
}

void switchTwoISR() {
  if (currState == states::RUN and period == true) {
    digitalWrite(redLED, HIGH);
  }
}
