/*
motorControl.ino
Alex, Jane, Selasie, and Supriti
April 25th, 2024

EE31 Challenge 5
*/

#include <Ultrasonic.h>
#include <LiquidCrystal_I2C.h>
#include <Wire.h>

LiquidCrystal_I2C lcd(0x27, 16, 2);

Ultrasonic ultrasonic(A5);  // Trigger and echo pin connected to pin 7

//motor one
const int motorAPin1 = 9;
const int motorAPin2 = 10;
const int enableAPin1 = 11;

//motor two
const int motorBPin1 = 5;
const int motorBPin2 = 6;
const int enableBPin1 = 3;




void setup() {
  
  pinMode(motorAPin1, OUTPUT);
  pinMode(motorAPin2, OUTPUT);
  pinMode(enableAPin1, OUTPUT);

  pinMode(motorBPin1, OUTPUT);
  pinMode(motorBPin2, OUTPUT);
  pinMode(enableBPin1, OUTPUT);

  lcd.init();
  lcd.backlight();
  Serial.begin(9600);

}

void loop() {
  //move forward 25 inches

  for (int i = 0; i <= 10; i++) {
    forwardDirection(150);
    vel();
    delay(500);
  }

  for (int i = 0; i <= 10; i++) {
    forwardDirection(200);
    vel();
    delay(500);
  }

  for (int i = 0; i <= 10; i++) {
    reverseDirection(150);
    vel();
    delay(500);
  }


  for (int i = 0; i <= 10; i++) {
    reverseDirection(200);
    vel();
    delay(500);
  }



  stopMotor();
  vel();
  delay(250);
  vel();
  delay(10000);
  

  
}




void vel() {
  static unsigned long lastTime = 0;
  static long lastDistance = 0;
  float velocity;

  unsigned long currentTime = millis();
  long currentDistance = ultrasonic.MeasureInCentimeters();

  // Calculate velocity only if a significant time has elapsed (e.g., every 200 milliseconds)
  if (currentTime - lastTime >= 500) {
    // Calculate velocity in cm/s
    velocity = (float)(currentDistance - lastDistance) / (currentTime - lastTime) * 1000.0;
    
    lastDistance = currentDistance;
    lastTime = currentTime;
  }
  lcd.setCursor(0,0);
  lcd.print("Velocity:");
  lcd.setCursor(0,1);
  lcd.print(velocity);
  lcd.setCursor(4, 1);
  lcd.print(" cm/s");

  delay(100);
}




/*
 * name:      forwardDirection
 * purpose:   move the motor
 * arguments: motor speed
 * returns:   None (void)
 * effects: moves the motor forward
 */
void forwardDirection(int speed) {
  analogWrite(motorAPin1, speed);
  digitalWrite(motorAPin2, LOW);

  digitalWrite(motorBPin1, LOW);
  analogWrite(motorBPin2, speed);

  digitalWrite(enableAPin1, HIGH); // Set speed (0 to 255)
  digitalWrite(enableBPin1, HIGH);
}



void reverseDirection(int speed) {
  digitalWrite(motorAPin1, LOW);
  digitalWrite(motorAPin2, HIGH);

  digitalWrite(motorBPin1, HIGH);
  digitalWrite(motorBPin2, LOW);

  analogWrite(enableAPin1, 150); // Set speed (0 to 255)
  analogWrite(enableBPin1, 200);
}


/*
 * name:      stopMotor
 * purpose:   stop the motor
 * arguments: None
 * returns:   None (void)
 */
void stopMotor() {
  //stop motor A
  digitalWrite(motorAPin1, LOW);
  digitalWrite(motorAPin2, LOW);

  //stop motor B
  digitalWrite(motorBPin1, LOW);
  digitalWrite(motorBPin2, LOW);
}
